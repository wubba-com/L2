package main

import (
	builder "L2/task1/builder/pattern"
	"fmt"
)

/**
Строитель — это порождающий паттерн проектирования, который позволяет создавать сложные объекты пошагово.
Строитель даёт возможность использовать один и тот же код строительства для получения разных представлений объектов.

// Строитель можно использовать в репозиториях для построения строки запроса

Нужен:
1. Когда вам нужно собирать сложные составные объекты. Строитель конструирует объекты пошагово, а не за один проход
2. Когда ваш код должен создавать разные представления какого-то объекта

++ Плюсы
Позволяет создавать продукты пошагово.
Позволяет использовать один и тот же код для создания различных продуктов.
Изолирует сложный код сборки продукта

-- Минусы
1. Клиент будет привязан к конкретным классам строителей, так как в интерфейсе директора может не быть метода получения результата.

Какую проблему решает паттерн:
Есть сложный объект, требующий кропотливой пошаговой инициализации множества полей и вложенных объектов.
Код инициализации таких объектов состоит из 10 параметров
*/

func main() {
	concreteBuilder := builder.NewMySqlBuilder()
	query := concreteBuilder.Select("user", []string{"name", "email"}).Where("id", "=", "1").Get()
	fmt.Println(query)
}
